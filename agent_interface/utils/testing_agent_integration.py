#!/usr/bin/env python3
"""
Testing Agent Integration Script
Demonstrates how to integrate LLM-generated test cases with the Testing Agent framework
"""

import json
import os
from datetime import datetime

def create_test_integration_file(test_cases_json, output_path="generated_tests"):
    """
    Create a Python file that integrates with the Testing Agent framework
    """
    
    # Parse test cases if it's a string
    if isinstance(test_cases_json, str):
        test_cases = json.loads(test_cases_json)
    else:
        test_cases = test_cases_json
    
    # Generate the Python integration code
    python_code = f'''#!/usr/bin/env python3
"""
Generated Test Cases for Testing Agent Framework
Auto-generated on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

import os
import sys
import json
from pathlib import Path

# Add the src directory to the Python path
sys.path.append(str(Path(__file__).parent.parent / "src"))

try:
    from test_agent_main import TestAgentMain
    from test_agent import TestAgent
except ImportError as e:
    print(f"Error importing Testing Agent modules: {{e}}")
    print("Make sure you're running this from the Testing-Agent directory")
    sys.exit(1)

# Test cases generated by LLM
GENERATED_TEST_CASES = {json.dumps(test_cases, indent=4)}

class LLMTestIntegration:
    """Integration class for LLM-generated test cases with Testing Agent"""
    
    def __init__(self, api_key=None):
        self.api_key = api_key or os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")
        
        self.main_agent = TestAgentMain(
            api_key=self.api_key,
            max_actions=20,
            debug=True
        )
        
    def convert_to_testing_agent_format(self, llm_test_case):
        """Convert LLM test case format to Testing Agent format"""
        return {{
            'description': f"Test: {{llm_test_case['test_name']}}\\n"
                          f"Steps: {{llm_test_case['steps_or_input']}}\\n"
                          f"Expected: {{llm_test_case['expected_outcome']}}",
            'expected_outcome': llm_test_case['expected_outcome'],
            'test_type': 'negative' if llm_test_case.get('reason_for_failure') else 'positive',
            'steps': llm_test_case['steps_or_input'],
            'validation_criteria': llm_test_case.get('reason_for_failure', 'Should complete successfully')
        }}
    
    def execute_all_tests(self):
        """Execute all generated test cases"""
        print(f"üöÄ Starting execution of {{len(GENERATED_TEST_CASES)}} LLM-generated test cases...")
        
        results = []
        
        for i, test_case in enumerate(GENERATED_TEST_CASES, 1):
            print(f"\\nüìã Executing Test Case {{i}}: {{test_case['test_name']}}")
            print(f"Type: {{'Negative' if test_case.get('reason_for_failure') else 'Positive'}} Test")
            
            # Convert to Testing Agent format
            agent_test_case = self.convert_to_testing_agent_format(test_case)
            
            try:
                # Execute using TestAgentMain
                result = self.main_agent.execute_single_test_case(agent_test_case)
                
                test_result = {{
                    'test_name': test_case['test_name'],
                    'status': 'PASSED' if result.get('success', False) else 'FAILED',
                    'execution_time': result.get('execution_time', 0),
                    'details': result.get('details', ''),
                    'agent_logs': result.get('logs', [])
                }}
                
                results.append(test_result)
                print(f"‚úÖ Test Case {{i}} completed: {{test_result['status']}}")
                
            except Exception as e:
                test_result = {{
                    'test_name': test_case['test_name'],
                    'status': 'ERROR',
                    'error': str(e),
                    'execution_time': 0
                }}
                results.append(test_result)
                print(f"‚ùå Test Case {{i}} failed with error: {{str(e)}}")
        
        # Generate summary report
        self.generate_test_report(results)
        
        return results
    
    def generate_test_report(self, results):
        """Generate a comprehensive test execution report"""
        passed = len([r for r in results if r['status'] == 'PASSED'])
        failed = len([r for r in results if r['status'] == 'FAILED'])
        errors = len([r for r in results if r['status'] == 'ERROR'])
        total = len(results)
        
        print(f"\\nüìä Test Execution Summary:")
        print(f"Total Tests: {{total}}")
        print(f"Passed: {{passed}} ({{passed/total*100:.1f}}%)")
        print(f"Failed: {{failed}} ({{failed/total*100:.1f}}%)")
        print(f"Errors: {{errors}} ({{errors/total*100:.1f}}%)")
        
        # Save detailed report
        report_file = f"logs/llm_test_report_{{datetime.now().strftime('%Y%m%d_%H%M%S')}}.json"
        os.makedirs("logs", exist_ok=True)
        
        with open(report_file, 'w') as f:
            json.dump({{
                'summary': {{
                    'total': total,
                    'passed': passed,
                    'failed': failed,
                    'errors': errors,
                    'success_rate': passed/total*100
                }},
                'results': results,
                'generated_at': datetime.now().isoformat()
            }}, f, indent=2)
        
        print(f"üìÑ Detailed report saved to: {{report_file}}")

def main():
    """Main execution function"""
    try:
        # Initialize the integration
        integration = LLMTestIntegration()
        
        # Execute all tests
        results = integration.execute_all_tests()
        
        print("\\nüèÅ LLM Test Integration completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Integration failed: {{str(e)}}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
'''
    
    # Create output directory if it doesn't exist
    os.makedirs(output_path, exist_ok=True)
    
    # Write the integration file
    output_file = os.path.join(output_path, f"llm_integration_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py")
    
    with open(output_file, 'w') as f:
        f.write(python_code)
    
    print(f"‚úÖ Testing Agent integration file created: {output_file}")
    print(f"üìã Generated {len(test_cases)} test cases")
    
    return output_file

# Example usage
if __name__ == "__main__":
    # Example test cases (this would normally come from the web interface)
    example_test_cases = [
        {
            "test_name": "Valid Login Test",
            "steps_or_input": "Navigate to login page, enter valid credentials, click login",
            "expected_outcome": "User successfully logs in and sees dashboard",
        },
        {
            "test_name": "Invalid Email Format",
            "steps_or_input": "Navigate to login page, enter invalid email format, click login",
            "expected_outcome": "Error message displayed for invalid email format",
            "reason_for_failure": "Email format validation should reject invalid formats"
        }
    ]
    
    # Create integration file
    output_file = create_test_integration_file(example_test_cases)
    print(f"Integration file ready: {output_file}")
